import {ActionsConstants} from '../constants'
import {call, put, all, takeEvery, takeLatest} from 'redux-saga/effects'
import {StoreActions} from "../actions";

function* userDetailsRequest(action) {
    console.log('Saga=', action);
    try {
        const uri = '/api/getUserDetails/' + action.payload.username;
        const res = yield call(fetch, uri);
        if (res.status === 200) {
            const json = yield call([res, 'json']);
            yield put(StoreActions.handleUserDetailsResponse(json));
        }
        else {
            throw(res.error);
        }
    } catch (e) {
        console.error(e);
    }
}

function* UserDetailsSaga() {
    yield takeEvery(ActionsConstants.USER_DETAILS_REQUEST, userDetailsRequest);
}

function* updateProfileRequest(action) {
    console.log('Saga=', action);
    try {
        if (action.payload.oldUsername !== action.payload.newUsername) {
            const uri = '/api/userExists/' + action.payload.newUsername;
            const res = yield call(fetch, uri);
            yield put(StoreActions.handleUserExistsResponse(res));
        }

        yield put(StoreActions.updateProfileDetails(action.payload.newUsername, action.payload.newLocation));
    } catch (e) {
        console.error(e);
    }
}

function* UpdateProfileSaga() {
    yield takeLatest(ActionsConstants.UPDATE_PROFILE_REQUEST, updateProfileRequest);
}

function* updateUserRequest(action) {
    console.log('Saga=', action);
    try {
            const uri = '/api/updateUser/' + action.payload.oldUsername;
            const res = yield call(fetch, uri, {
                method: 'POST',
                body: JSON.stringify({
                    newUsername: action.payload.newUsername,
                    newLocation: action.payload.newLocation}),
                headers: {
                    'Content-Type': 'application/json'
                },
            });
            yield put(StoreActions.setUsername(action.payload.newUsername));
    } catch (e) {
        console.error(e);
    }
}

function* UpdateUserSaga() {
    yield takeLatest(ActionsConstants.UPDATE_USER_REQUEST, updateUserRequest);
}

export default function* ProfileSagas() {
    yield all([
        UserDetailsSaga(),
        UpdateProfileSaga(),
        UpdateUserSaga(),
    ])
};